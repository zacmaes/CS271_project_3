Microsoft (R) Macro Assembler Version 14.29.30139.0	    07/17/22 23:40:16
<Project Three: Data Validation, Looping, Constants     (Pro  Page 1 - 1


				TITLE Project Three: Data Validation, Looping, Constants     (Proj3_maesz.asm)

				; Author: Zachary Maes
				; Last Modified: July 17, 2022
				; OSU email address: maesz@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:  3               Due Date: July 17, 2022
				; Description: 
				; This program does the following:
				;
				;	-Display the program title and programmer’s name.
				;	-Get the user's name, and greet the user.
				;	-Display instructions for the user.
				;	-Repeatedly prompt the user to enter a number.
				;		a.) Validate the user input to be in [-200, -100] or [-50, -1] (inclusive).
				;		b.) Notify the user of any invalid negative numbers (negative, but not in the ranges specified)
				;		c.) Count and accumulate the valid user numbers until a non-negative number is entered. Detect this using the SIGN flag.
				;				(The non-negative number and any numbers not in the specified ranges are discarded.)

				;	-Calculate the (rounded integer) average of the valid numbers and store in a variable.
				;	-Display:
				;		a.) the count of validated numbers entered
				;			NOTE: if no valid numbers were entered, display a special message and skip to (f)
				;		b.) the sum of valid numbers
				;		c.) the maximum (closest to 0) valid user value entered
				;		d.) the minimum (farthest from 0) valid user value entered
				;		e.) the average, rounded to the nearest integer
				;			i.) -20.01 rounds to -20
				;			ii.) -20.5 rounds to -20
				;			iii.) -20.51 rounds to -21
				;			iv.) -20.99 rounds to -21
				;		f.) a parting message (with the user’s name)

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert macro definitions here)

				; (insert constant definitions here)

 00000000			.data

				; (insert variable definitions here)


				; Data for program title and programmer’s name.
 00000000 57 65 6C 6C 20	intro_1 BYTE	"Well howdy there Partner! Welcome to the Good Ol' Gator Country Number Round Up! I'm Zac Maes and I'll be y'alls airboat captain today.", 0
	   68 6F 77 64 79
	   20 74 68 65 72
	   65 20 50 61 72
	   74 6E 65 72 21
	   20 57 65 6C 63
	   6F 6D 65 20 74
	   6F 20 74 68 65
	   20 47 6F 6F 64
	   20 4F 6C 27 20
	   47 61 74 6F 72
	   20 43 6F 75 6E
	   74 72 79 20 4E
	   75 6D 62 65 72
	   20 52 6F 75 6E
	   64 20 55 70 21
	   20 49 27 6D 20
	   5A 61 63 20 4D
	   61 65 73 20 61
	   6E 64 20 49 27
	   6C 6C 20 62 65
	   20 79 27 61 6C
	   6C 73 20 61 69
	   72 62 6F 61 74
	   20 63 61 70 74
	   61 69 6E 20 74
	   6F 64 61 79 2E
	   00
 00000088 50 6C 65 61 73	intro_2 BYTE	"Please keep your hands, feet, flip flops, and crocs inside the airboat at all times. This programs fixin' to do a little bit of Everglades Croc-ulus.", 0
	   65 20 6B 65 65
	   70 20 79 6F 75
	   72 20 68 61 6E
	   64 73 2C 20 66
	   65 65 74 2C 20
	   66 6C 69 70 20
	   66 6C 6F 70 73
	   2C 20 61 6E 64
	   20 63 72 6F 63
	   73 20 69 6E 73
	   69 64 65 20 74
	   68 65 20 61 69
	   72 62 6F 61 74
	   20 61 74 20 61
	   6C 6C 20 74 69
	   6D 65 73 2E 20
	   54 68 69 73 20
	   70 72 6F 67 72
	   61 6D 73 20 66
	   69 78 69 6E 27
	   20 74 6F 20 64
	   6F 20 61 20 6C
	   69 74 74 6C 65
	   20 62 69 74 20
	   6F 66 20 45 76
	   65 72 67 6C 61
	   64 65 73 20 43
	   72 6F 63 2D 75
	   6C 75 73 2E 00
 0000011E 57 65 20 77 69	intro_3 BYTE	"We will be accumulating user-input negative integers between the specified bounds, then displaying statistics of the input values including minimum, maximum, and average values, total sum, andtotal number of valid inputs.", 0
	   6C 6C 20 62 65
	   20 61 63 63 75
	   6D 75 6C 61 74
	   69 6E 67 20 75
	   73 65 72 2D 69
	   6E 70 75 74 20
	   6E 65 67 61 74
	   69 76 65 20 69
	   6E 74 65 67 65
	   72 73 20 62 65
	   74 77 65 65 6E
	   20 74 68 65 20
	   73 70 65 63 69
	   66 69 65 64 20
	   62 6F 75 6E 64
	   73 2C 20 74 68
	   65 6E 20 64 69
	   73 70 6C 61 79
	   69 6E 67 20 73
	   74 61 74 69 73
	   74 69 63 73 20
	   6F 66 20 74 68
	   65 20 69 6E 70
	   75 74 20 76 61
	   6C 75 65 73 20
	   69 6E 63 6C 75
	   64 69 6E 67 20
	   6D 69 6E 69 6D
	   75 6D 2C 20 6D
	   61 78 69 6D 75
	   6D 2C 20 61 6E
	   64 20 61 76 65
	   72 61 67 65 20
	   76 61 6C 75 65
	   73 2C 20 74 6F
	   74 61 6C 20 73
	   75 6D 2C 20 61
	   6E 64 74 6F 74
	   61 6C 20 6E 75
	   6D 62 65 72 20
	   6F 66 20 76 61
	   6C 69 64 20 69
	   6E 70 75 74 73
	   2E 00

 000001FC 48 65 79 21 20	prompt_1 BYTE	"Hey! You there! What is your name? Please enter it here: ", 0	; data for getting the user's name
	   59 6F 75 20 74
	   68 65 72 65 21
	   20 57 68 61 74
	   20 69 73 20 79
	   6F 75 72 20 6E
	   61 6D 65 3F 20
	   50 6C 65 61 73
	   65 20 65 6E 74
	   65 72 20 69 74
	   20 68 65 72 65
	   3A 20 00

 00000236 57 65 6C 6C 20	greeting_start BYTE	"Well ya darn tootin! I got a cousin up in Loxahatchee named ", 0	; first part of greeting.
	   79 61 20 64 61
	   72 6E 20 74 6F
	   6F 74 69 6E 21
	   20 49 20 67 6F
	   74 20 61 20 63
	   6F 75 73 69 6E
	   20 75 70 20 69
	   6E 20 4C 6F 78
	   61 68 61 74 63
	   68 65 65 20 6E
	   61 6D 65 64 20
	   00
 00000273 2C 20 6E 69 63	greeting_end   BYTE	", nice to meet you!", 0	; second part of greeting, comes after user_name
	   65 20 74 6F 20
	   6D 65 65 74 20
	   79 6F 75 21 00

 00000287  00000015 [		input_buffer   BYTE 21 DUP(0)					; input buffer holds buffer for ReadString
	    00
	   ]
 0000029C 00000000		byte_count	   DWORD ?							; holds counter for ReadString

 000002A0 49 6E 73 74 72	instruct_1 BYTE	"Instructions:", 0	; data for instructions.
	   75 63 74 69 6F
	   6E 73 3A 00
 000002AE 50 6C 65 61 73	instruct_2 BYTE	"Please enter numbers in [-200, -100] or [-50, -1].", 0	; data for instructions.
	   65 20 65 6E 74
	   65 72 20 6E 75
	   6D 62 65 72 73
	   20 69 6E 20 5B
	   2D 32 30 30 2C
	   20 2D 31 30 30
	   5D 20 6F 72 20
	   5B 2D 35 30 2C
	   20 2D 31 5D 2E
	   00
 000002E1 45 6E 74 65 72	instruct_3 BYTE	"Enter a non-negative number when you getter done to see the croc-ulated results.", 0	; data for instructions.
	   20 61 20 6E 6F
	   6E 2D 6E 65 67
	   61 74 69 76 65
	   20 6E 75 6D 62
	   65 72 20 77 68
	   65 6E 20 79 6F
	   75 20 67 65 74
	   74 65 72 20 64
	   6F 6E 65 20 74
	   6F 20 73 65 65
	   20 74 68 65 20
	   63 72 6F 63 2D
	   75 6C 61 74 65
	   64 20 72 65 73
	   75 6C 74 73 2E
	   00

 00000332 45 6E 74 65 72	num_prompt BYTE	"Enter Number: ", 0
	   20 4E 75 6D 62
	   65 72 3A 20 00

 00000341 4E 75 6D 62 65	invalid_num BYTE "Number Invalid!", 0
	   72 20 49 6E 76
	   61 6C 69 64 21
	   00

 00000351 00000000		valid_count SDWORD	?	; count of valid numbers
 00000355 00000000		valid_sum	SDWORD	?	; value of the sum of all valid numbers
 00000359 00000000		valid_max SDWORD	?	; the maximum valid number
 0000035D 00000000		valid_min SDWORD	?	; the minimum valid number
 00000361 00000000		valid_average SDWORD	?	; average
				; average can be calculated at the end by taking the sum divided by the count.







 00000365 59 6F 75 20 65	return_confirmation_1 BYTE "You entered ", 0
	   6E 74 65 72 65
	   64 20 00
				; surround the ammount of numbers entered with these return statements
 00000372 20 76 61 6C 69	return_confirmation_2 BYTE " valid numbers.", 0		; "You entered 3 valid numbers."
	   64 20 6E 75 6D
	   62 65 72 73 2E
	   00


 00000382 54 68 65 20 6D	result_0 BYTE "The maximum valid number is ", 0 ; The maximum valid number is -15
	   61 78 69 6D 75
	   6D 20 76 61 6C
	   69 64 20 6E 75
	   6D 62 65 72 20
	   69 73 20 00
 0000039F 54 68 65 20 6D	result_1 BYTE "The minimum valid number is ", 0 ; The minimum valid number is -110
	   69 6E 69 6D 75
	   6D 20 76 61 6C
	   69 64 20 6E 75
	   6D 62 65 72 20
	   69 73 20 00
 000003BC 54 68 65 20 73	result_2 BYTE "The sum of your valid numbers is ", 0 ; The sum of your valid numbers is -161
	   75 6D 20 6F 66
	   20 79 6F 75 72
	   20 76 61 6C 69
	   64 20 6E 75 6D
	   62 65 72 73 20
	   69 73 20 00
 000003DE 54 68 65 20 72	result_3 BYTE "The rounded average is ", 0 ; The rounded average is -54
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   69 73 20 00


 000003F6 2C 20 77 65 20	good_bye_1 BYTE	", we hope you enjoyed your fresh freshwater integers!", 0	; parting message 
	   68 6F 70 65 20
	   79 6F 75 20 65
	   6E 6A 6F 79 65
	   64 20 79 6F 75
	   72 20 66 72 65
	   73 68 20 66 72
	   65 73 68 77 61
	   74 65 72 20 69
	   6E 74 65 67 65
	   72 73 21 00
 0000042C 49 6C 6C 20 74	good_bye_2 BYTE	"Ill tell you what, I reckon we better head back to the dock over yonder before them no-see-ums come out and start bitin'.", 0	; parting message.
	   65 6C 6C 20 79
	   6F 75 20 77 68
	   61 74 2C 20 49
	   20 72 65 63 6B
	   6F 6E 20 77 65
	   20 62 65 74 74
	   65 72 20 68 65
	   61 64 20 62 61
	   63 6B 20 74 6F
	   20 74 68 65 20
	   64 6F 63 6B 20
	   6F 76 65 72 20
	   79 6F 6E 64 65
	   72 20 62 65 66
	   6F 72 65 20 74
	   68 65 6D 20 6E
	   6F 2D 73 65 65
	   2D 75 6D 73 20
	   63 6F 6D 65 20
	   6F 75 74 20 61
	   6E 64 20 73 74
	   61 72 74 20 62
	   69 74 69 6E 27
	   2E 00
 000004A6 57 65 6C 6C 20	good_bye_3 BYTE	"Well thats all she wrote yall, yall come back now.", 0	; parting message.
	   74 68 61 74 73
	   20 61 6C 6C 20
	   73 68 65 20 77
	   72 6F 74 65 20
	   79 61 6C 6C 2C
	   20 79 61 6C 6C
	   20 63 6F 6D 65
	   20 62 61 63 6B
	   20 6E 6F 77 2E
	   00


 00000000			.code
 00000000			main PROC

				; (insert executable instructions here)

				; -------------INTRODUCTION---------------------
 00000000  BA 00000000 R	mov EDX, OFFSET intro_1
 00000005  E8 00000000 E	call WriteString
 0000000A  E8 00000000 E	call CrLf
 0000000F  E8 00000000 E	call CrLf

 00000014  BA 00000088 R	mov EDX, OFFSET intro_2
 00000019  E8 00000000 E	call WriteString
 0000001E  E8 00000000 E	call CrLf
 00000023  E8 00000000 E	call CrLf

 00000028  BA 0000011E R	mov EDX, OFFSET intro_3
 0000002D  E8 00000000 E	call WriteString
 00000032  E8 00000000 E	call CrLf
 00000037  E8 00000000 E	call CrLf

				; -------------PROMPT USER FOR NAME---------------------

 0000003C  BA 000001FC R	mov EDX, OFFSET prompt_1
 00000041  E8 00000000 E	call WriteString
 00000046  E8 00000000 E	call CrLf
 0000004B  BA 00000287 R	mov EDX, OFFSET input_buffer	; point to the buffer
 00000050  B9 00000015		mov ECX, SIZEOF input_buffer	; specify max characters
 00000055  E8 00000000 E	call ReadString			; EDX is addres of string
 0000005A  A3 0000029C R	mov	byte_count, EAX		; number of characters saved in byte_count


				; -------------Greet USER---------------------

 0000005F  E8 00000000 E	call CrLf
 00000064  BA 00000236 R	mov EDX, OFFSET greeting_start		; string defined above
 00000069  E8 00000000 E	call WriteString

 0000006E  BA 00000287 R	mov EDX, OFFSET input_buffer		; entererd name is read from input_buffer
 00000073  E8 00000000 E	call WriteString

 00000078  BA 00000273 R	mov EDX, OFFSET greeting_end	; punctuation to end the greeting immediatly after user_name is written to the console.
 0000007D  E8 00000000 E	call WriteString
 00000082  E8 00000000 E	call CrLf
 00000087  E8 00000000 E	call CrLf


				; -----------INSTRUCTIONS FOR USER------------------
 0000008C  BA 000002A0 R	mov EDX, OFFSET instruct_1		; string defined above
 00000091  E8 00000000 E	call WriteString
 00000096  E8 00000000 E	call CrLf

 0000009B  BA 000002AE R	mov EDX, OFFSET instruct_2		; string defined above
 000000A0  E8 00000000 E	call WriteString
 000000A5  E8 00000000 E	call CrLf

 000000AA  BA 000002E1 R	mov EDX, OFFSET instruct_3		; string defined above
 000000AF  E8 00000000 E	call WriteString
 000000B4  E8 00000000 E	call CrLf
 000000B9  E8 00000000 E	call CrLf



				;	-Repeatedly prompt the user to enter a number.
				;		a.) Validate the user input to be in [-200, -100] or [-50, -1] (inclusive).
				;		b.) Notify the user of any invalid negative numbers (negative, but not in the ranges specified)
				;		c.) Count and accumulate the valid user numbers until a non-negative number is entered. Detect this using the SIGN flag.????????
				;				(The non-negative number and any numbers not in the specified ranges are discarded.)


				; --------PROMPT USER TO ENTER NUMBER-----------------

					;mov EDX, OFFSET num_prompt		; string defined above
					;call WriteString
					;call ReadInt
					;cmp  EAX, -1
					;JG  _invalidNum				; COULD NOT FIGURE OUT JNE with sign flag for the life of me!!!!!!
					;JL	_isNegNum


				; <=  -200...error
				; >= -200, <= -100...valid
				; > -100, <= -50

 000000BE  C7 05 00000351 R	mov  valid_count, 0
	   00000000
 000000C8  C7 05 00000355 R	mov  valid_sum, 0
	   00000000

 000000D2			_getNum:
 000000D2  BA 00000332 R		mov EDX, OFFSET num_prompt		; string defined above
 000000D7  E8 00000000 E		call WriteString
 000000DC  E8 00000000 E		call ReadInt
 000000E1  83 F8 00			cmp  EAX, 0
 000000E4  7D 49			JGE  _positiveNumCheck				; COULD NOT FIGURE OUT JNE with sign flag for the life of me!!!!!!
 000000E6  7C 11			JL	_isNegNum

				; ---------INVALID NUMBER ERROR Message
 000000E8			_invalidNum:
 000000E8  BA 00000341 R		mov EDX, OFFSET invalid_num		; string defined above
 000000ED  E8 00000000 E		call WriteString
 000000F2  E8 00000000 E		call CrLf
 000000F7  EB D9			JMP  _getNum

 000000F9			_isNegNum:
 000000F9  3D FFFFFF38			cmp EAX, -200
 000000FE  7C E8			JL	_invalidNum
 00000100  7D 00			JGE _twoHundoUp

 00000102			_twoHundoUp:
 00000102  83 F8 9C			cmp EAX, -100
 00000105  7E 0E			JLE _lowerBound
 00000107  7F 00			JG	_aboveOneHundo

 00000109			_aboveOneHundo:
 00000109  83 F8 CE			cmp EAX, -50
 0000010C  7C DA			JL	_invalidNum
 0000010E  7D 00			JGE _aboveFiftyIncl

 00000110			_aboveFiftyIncl:
 00000110  83 F8 FF			cmp EAX, -1
 00000113  7E 0D			JLE _upperBound



 00000115			_lowerBound:
 00000115  E8 00000000 E		call WriteInt	; If we made it here, the number is between -200 and -100 inclusive
 0000011A  01 05 00000355 R		ADD  valid_sum, EAX
 00000120  EB 18			jmp  _maxMinify

 00000122			_upperBound:
 00000122  E8 00000000 E		call WriteInt	; if we made it here, the number is between -50 and -1 inclusive
 00000127  01 05 00000355 R		ADD  valid_sum, EAX
 0000012D  EB 0B			jMP  _maxMinify

 0000012F			_positiveNumCheck:	; land here when done with a positve num
 0000012F  83 3D 00000351 R		cmp  valid_count, 0
	   00
 00000136  7E B0			JLE   _invalidNum
 00000138  7F 5F			JG   _endValidation


 0000013A			_maxMinify:		; assigns max or min
 0000013A  83 3D 00000351 R		cmp  valid_count, 0
	   00
 00000141  7E 02			JLE   _assignToBothMaxMin
 00000143  7F 16			JG	  _checkMax
					

 00000145			_assignToBothMaxMin:
 00000145  A3 00000359 R		mov  valid_max, EAX
 0000014A  A3 0000035D R		mov  valid_min, EAX
 0000014F  83 05 00000351 R		ADD  valid_count, 1
	   01
 00000156  E9 FFFFFF77			JMP  _getNum

 0000015B			_checkMax:
 0000015B  3B 05 00000359 R		cmp  EAX, valid_max
 00000161  7C 11			JL   _checkMin
 00000163  A3 00000359 R		mov  valid_max, EAX
 00000168  83 05 00000351 R		ADD  valid_count, 1
	   01
 0000016F  E9 FFFFFF5E			JMP  _getNum

 00000174			_checkMin:
 00000174  3B 05 0000035D R		cmp  EAX, valid_min
 0000017A  7F 11			JG   _validNotMinOrMax
 0000017C  A3 0000035D R		mov valid_min, EAX
 00000181  83 05 00000351 R		ADD  valid_count, 1
	   01
 00000188  E9 FFFFFF45			JMP  _getNum

 0000018D			_validNotMinOrMax:
 0000018D  83 05 00000351 R		ADD  valid_count, 1
	   01
 00000194  E9 FFFFFF39			JMP  _getNum
					
					

 00000199			_endValidation:
 00000199  EB 00			jmp  _calculateAverage

 0000019B			_calculateAverage:
					; ???? figure out rounding with IDIV

 0000019B  EB 00			jmp  _returnConfirmation

 0000019D			_returnConfirmation:
 0000019D  BA 00000365 R		mov EDX, OFFSET return_confirmation_1		; string defined above
 000001A2  E8 00000000 E		call WriteString
					
 000001A7  A1 00000351 R		mov EAX, valid_count
 000001AC  E8 00000000 E		call WriteInt

 000001B1  BA 00000372 R		mov EDX, OFFSET return_confirmation_2		; string defined above
 000001B6  E8 00000000 E		call WriteString
 000001BB  E8 00000000 E		call CrLf

				;	-Calculate the (rounded integer) average of the valid numbers and store in a variable.
				;	-Display:
				;		a.) the count of validated numbers entered
				;			NOTE: if no valid numbers were entered, display a special message and skip to (f)
				;		b.) the sum of valid numbers
				;		c.) the maximum (closest to 0) valid user value entered
				;		d.) the minimum (farthest from 0) valid user value entered
				;		e.) the average, rounded to the nearest integer
				;			i.) -20.01 rounds to -20
				;			ii.) -20.5 rounds to -20
				;			iii.) -20.51 rounds to -21
				;			iv.) -20.99 rounds to -21
				;		f.) a parting message (with the user’s name)




				; ----------FINAL RETURN------------------
 000001C0  BA 00000382 R	mov EDX, OFFSET result_0		; string defined above
 000001C5  E8 00000000 E	call WriteString

 000001CA  A1 00000359 R	mov EAX, valid_max
 000001CF  E8 00000000 E	call WriteInt
 000001D4  E8 00000000 E	call CrLf

 000001D9  BA 0000039F R	mov EDX, OFFSET result_1		; string defined above
 000001DE  E8 00000000 E	call WriteString

 000001E3  A1 0000035D R	mov EAX, valid_min
 000001E8  E8 00000000 E	call WriteInt
 000001ED  E8 00000000 E	call CrLf

 000001F2  BA 000003BC R	mov EDX, OFFSET result_2		; string defined above
 000001F7  E8 00000000 E	call WriteString

 000001FC  A1 00000351 R	mov EAX, valid_count
 00000201  E8 00000000 E	call WriteInt
 00000206  E8 00000000 E	call CrLf

 0000020B  BA 000003DE R	mov EDX, OFFSET result_3		; string defined above
 00000210  E8 00000000 E	call WriteString

 00000215  A1 00000361 R	mov EAX, valid_average
 0000021A  E8 00000000 E	call WriteInt
 0000021F  E8 00000000 E	call CrLf
 00000224  E8 00000000 E	call CrLf



				;---------Goood bye----------------------

 00000229  BA 00000287 R	mov EDX, OFFSET input_buffer		; string defined above
 0000022E  E8 00000000 E	call WriteString

 00000233  BA 000003F6 R	mov EDX, OFFSET good_bye_1		; string defined above
 00000238  E8 00000000 E	call WriteString
 0000023D  E8 00000000 E	call CrLf

 00000242  BA 0000042C R	mov EDX, OFFSET good_bye_2		; string defined above
 00000247  E8 00000000 E	call WriteString
 0000024C  E8 00000000 E	call CrLf

 00000251  BA 000004A6 R	mov EDX, OFFSET good_bye_3		; string defined above
 00000256  E8 00000000 E	call WriteString
 0000025B  E8 00000000 E	call CrLf



					Invoke ExitProcess,0	; exit to operating system
 00000260  6A 00	   *	    push   +000000000h
 00000262  E8 00000000 E   *	    call   ExitProcess
 00000267			main ENDP

				; (insert additional procedures here)

				END main
Microsoft (R) Macro Assembler Version 14.29.30139.0	    07/17/22 23:40:16
<Project Three: Data Validation, Looping, Constants     (Pro  Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000004D9 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000267 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000267 Public STDCALL
  _getNum  . . . . . . . . . . .	L Near	 000000D2 _TEXT	
  _invalidNum  . . . . . . . . .	L Near	 000000E8 _TEXT	
  _isNegNum  . . . . . . . . . .	L Near	 000000F9 _TEXT	
  _twoHundoUp  . . . . . . . . .	L Near	 00000102 _TEXT	
  _aboveOneHundo . . . . . . . .	L Near	 00000109 _TEXT	
  _aboveFiftyIncl  . . . . . . .	L Near	 00000110 _TEXT	
  _lowerBound  . . . . . . . . .	L Near	 00000115 _TEXT	
  _upperBound  . . . . . . . . .	L Near	 00000122 _TEXT	
  _positiveNumCheck  . . . . . .	L Near	 0000012F _TEXT	
  _maxMinify . . . . . . . . . .	L Near	 0000013A _TEXT	
  _assignToBothMaxMin  . . . . .	L Near	 00000145 _TEXT	
  _checkMax  . . . . . . . . . .	L Near	 0000015B _TEXT	
  _checkMin  . . . . . . . . . .	L Near	 00000174 _TEXT	
  _validNotMinOrMax  . . . . . .	L Near	 0000018D _TEXT	
  _endValidation . . . . . . . .	L Near	 00000199 _TEXT	
  _calculateAverage  . . . . . .	L Near	 0000019B _TEXT	
  _returnConfirmation  . . . . .	L Near	 0000019D _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
byte_count . . . . . . . . . . .	DWord	 0000029C _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
good_bye_1 . . . . . . . . . . .	Byte	 000003F6 _DATA	
good_bye_2 . . . . . . . . . . .	Byte	 0000042C _DATA	
good_bye_3 . . . . . . . . . . .	Byte	 000004A6 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
greeting_end . . . . . . . . . .	Byte	 00000273 _DATA	
greeting_start . . . . . . . . .	Byte	 00000236 _DATA	
input_buffer . . . . . . . . . .	Byte	 00000287 _DATA	
instruct_1 . . . . . . . . . . .	Byte	 000002A0 _DATA	
instruct_2 . . . . . . . . . . .	Byte	 000002AE _DATA	
instruct_3 . . . . . . . . . . .	Byte	 000002E1 _DATA	
intro_1  . . . . . . . . . . . .	Byte	 00000000 _DATA	
intro_2  . . . . . . . . . . . .	Byte	 00000088 _DATA	
intro_3  . . . . . . . . . . . .	Byte	 0000011E _DATA	
invalid_num  . . . . . . . . . .	Byte	 00000341 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
num_prompt . . . . . . . . . . .	Byte	 00000332 _DATA	
prompt_1 . . . . . . . . . . . .	Byte	 000001FC _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
result_0 . . . . . . . . . . . .	Byte	 00000382 _DATA	
result_1 . . . . . . . . . . . .	Byte	 0000039F _DATA	
result_2 . . . . . . . . . . . .	Byte	 000003BC _DATA	
result_3 . . . . . . . . . . . .	Byte	 000003DE _DATA	
return_confirmation_1  . . . . .	Byte	 00000365 _DATA	
return_confirmation_2  . . . . .	Byte	 00000372 _DATA	
valid_average  . . . . . . . . .	DWord	 00000361 _DATA	
valid_count  . . . . . . . . . .	DWord	 00000351 _DATA	
valid_max  . . . . . . . . . . .	DWord	 00000359 _DATA	
valid_min  . . . . . . . . . . .	DWord	 0000035D _DATA	
valid_sum  . . . . . . . . . . .	DWord	 00000355 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
